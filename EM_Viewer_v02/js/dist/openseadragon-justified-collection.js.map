{"version":3,"sources":["openseadragon-justified-collection.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"openseadragon-justified-collection.js","sourcesContent":["(function ($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonImagefilters requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.World.prototype.arrange = function (options) {\n        if (!this.justifiedCollectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.justifiedCollectionInstance = new $.justifiedCollection(options);\n        }\n        return this.justifiedCollectionInstance;\n    };\n\n    /**\n     * @class justifiedCollection\n     * @classdesc Provides functionality for arranging images in a justified grid layout\n     * @param {Object} options\n     */\n    $.justifiedCollection = function (options) {\n        $.extend(true, this, {\n            columns: options.columns || 0,\n            tileMargin: options.tileMargin || 80,\n            tileSize: options.tileSize || 800,\n            showLastRow: options.showLastRow || true\n        }, options);\n\n        var ImageRow = new $.Row(this);\n\n        for (var i = 0; i < this.viewer._items.length; i++) {\n            var item = this.viewer._items[i];\n\n            //imagerow will set positions of items\n            ImageRow.addTileSource(item);\n        }\n\n        //draw remaining\n        if(this.showLastRow === true){\n            ImageRow.draw();\n        }\n\n    };\n\n    $.Row = function (world){\n        $.extend(true, this, world);\n\n        this.ready = false; //if true row is ready for drawing\n        this.images = []; //temp array of images needed for row buffering\n        this.height = 1; //changed based on ratio of row based on first row\n        this.totalWidth = 0; //after first row we know the total width\n        this.firstRow = true; //start with first row\n        this.rowWidth = 0; //hold temp rowWidth of each row.\n        this.line = 0; //y position of images to position\n\n        //positions rows of images rescales row to make it fit first row\n        this.draw = function() {\n            var x = 0;\n            this.images.map(function(image){\n                image.setHeight(this.height,true);\n                image.setPosition({x:x,y:this.line});\n                var tileSourceBounds = image.getBounds();\n                x = x+tileSourceBounds.width+((this.tileMargin/this.tileSize)*this.height);\n            }, this);\n\n            //increase x coordinate\n            this.line += this.height+(this.tileMargin/this.tileSize);\n            //reset values needed for row draw\n            this.ready = false;\n            this.images = [];\n            this.rowWidth = 0;\n        };\n\n        //add tileSource to row\n        this.addTileSource = function (tileSource) {\n            if(this.isReady()){\n                throw 'Can\\'t add tilesource to ready row!';\n            }\n\n            //set height of tile to 1, image will change keeping right ratio, images are of equal height in each row\n            tileSource.setHeight(1, true);\n\n            var tileSourceBounds = tileSource.getBounds();\n            this.images.push(tileSource);\n            this.rowWidth = this.rowWidth+(tileSourceBounds.width)+(this.tileMargin/this.tileSize);\n\n            //first row based on number of images, based on this the other rows will match it width\n            if(this.firstRow === true && this.images.length === this.columns) {\n                this.totalWidth = this.rowWidth;\n                this.firstRow = false;\n                this.ready = true;\n                this.draw();\n                return;\n            }\n\n            //otherwise draw the row if width ot total row is met\n            if(this.firstRow === false && this.rowWidth >= this.totalWidth ){\n                //resizePercentage\n                this.height = parseFloat(this.totalWidth/this.rowWidth); //1200/1300 = 0.92;\n                this.ready = true;\n                this.draw();\n            }\n         };\n\n        //is the row ready to be drawn\n        this.isReady = function() {\n            return this.ready;\n        };\n    };\n\n})(OpenSeadragon);"]}